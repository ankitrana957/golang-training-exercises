// Code generated by MockGen. DO NOT EDIT.
// Source: records.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/student-api/models"
)

// Mockrecordstore is a mock of recordstore interface.
type Mockrecordstore struct {
	ctrl     *gomock.Controller
	recorder *MockrecordstoreMockRecorder
}

// MockrecordstoreMockRecorder is the mock recorder for Mockrecordstore.
type MockrecordstoreMockRecorder struct {
	mock *Mockrecordstore
}

// NewMockrecordstore creates a new mock instance.
func NewMockrecordstore(ctrl *gomock.Controller) *Mockrecordstore {
	mock := &Mockrecordstore{ctrl: ctrl}
	mock.recorder = &MockrecordstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrecordstore) EXPECT() *MockrecordstoreMockRecorder {
	return m.recorder
}

// InsertRecord mocks base method.
func (m *Mockrecordstore) InsertRecord(sub models.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecord", sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRecord indicates an expected call of InsertRecord.
func (mr *MockrecordstoreMockRecorder) InsertRecord(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecord", reflect.TypeOf((*Mockrecordstore)(nil).InsertRecord), sub)
}
