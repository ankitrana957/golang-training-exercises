// Code generated by MockGen. DO NOT EDIT.
// Source: subject.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/student-api/models"
)

// Mocksubjectstore is a mock of subjectstore interface.
type Mocksubjectstore struct {
	ctrl     *gomock.Controller
	recorder *MocksubjectstoreMockRecorder
}

// MocksubjectstoreMockRecorder is the mock recorder for Mocksubjectstore.
type MocksubjectstoreMockRecorder struct {
	mock *Mocksubjectstore
}

// NewMocksubjectstore creates a new mock instance.
func NewMocksubjectstore(ctrl *gomock.Controller) *Mocksubjectstore {
	mock := &Mocksubjectstore{ctrl: ctrl}
	mock.recorder = &MocksubjectstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksubjectstore) EXPECT() *MocksubjectstoreMockRecorder {
	return m.recorder
}

// GetSubject mocks base method.
func (m *Mocksubjectstore) GetSubject(id int) (models.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject", id)
	ret0, _ := ret[0].(models.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MocksubjectstoreMockRecorder) GetSubject(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*Mocksubjectstore)(nil).GetSubject), id)
}

// InsertSubject mocks base method.
func (m *Mocksubjectstore) InsertSubject(sub models.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSubject", sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSubject indicates an expected call of InsertSubject.
func (mr *MocksubjectstoreMockRecorder) InsertSubject(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSubject", reflect.TypeOf((*Mocksubjectstore)(nil).InsertSubject), sub)
}
