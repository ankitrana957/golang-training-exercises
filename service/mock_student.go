// Code generated by MockGen. DO NOT EDIT.
// Source: student.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/student-api/models"
)

// Mockstudentdatastore is a mock of studentdatastore interface.
type Mockstudentdatastore struct {
	ctrl     *gomock.Controller
	recorder *MockstudentdatastoreMockRecorder
}

// MockstudentdatastoreMockRecorder is the mock recorder for Mockstudentdatastore.
type MockstudentdatastoreMockRecorder struct {
	mock *Mockstudentdatastore
}

// NewMockstudentdatastore creates a new mock instance.
func NewMockstudentdatastore(ctrl *gomock.Controller) *Mockstudentdatastore {
	mock := &Mockstudentdatastore{ctrl: ctrl}
	mock.recorder = &MockstudentdatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstudentdatastore) EXPECT() *MockstudentdatastoreMockRecorder {
	return m.recorder
}

// GetStudent mocks base method.
func (m *Mockstudentdatastore) GetStudent(arg0 string) (models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", arg0)
	ret0, _ := ret[0].(models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockstudentdatastoreMockRecorder) GetStudent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*Mockstudentdatastore)(nil).GetStudent), arg0)
}

// InsertStudent mocks base method.
func (m *Mockstudentdatastore) InsertStudent(arg0 models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStudent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertStudent indicates an expected call of InsertStudent.
func (mr *MockstudentdatastoreMockRecorder) InsertStudent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStudent", reflect.TypeOf((*Mockstudentdatastore)(nil).InsertStudent), arg0)
}

// MockenrollmentServiceSample is a mock of enrollmentServiceSample interface.
type MockenrollmentServiceSample struct {
	ctrl     *gomock.Controller
	recorder *MockenrollmentServiceSampleMockRecorder
}

// MockenrollmentServiceSampleMockRecorder is the mock recorder for MockenrollmentServiceSample.
type MockenrollmentServiceSampleMockRecorder struct {
	mock *MockenrollmentServiceSample
}

// NewMockenrollmentServiceSample creates a new mock instance.
func NewMockenrollmentServiceSample(ctrl *gomock.Controller) *MockenrollmentServiceSample {
	mock := &MockenrollmentServiceSample{ctrl: ctrl}
	mock.recorder = &MockenrollmentServiceSampleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockenrollmentServiceSample) EXPECT() *MockenrollmentServiceSampleMockRecorder {
	return m.recorder
}

// GetSubs mocks base method.
func (m *MockenrollmentServiceSample) GetSubs(rollNo string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubs", rollNo)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubs indicates an expected call of GetSubs.
func (mr *MockenrollmentServiceSampleMockRecorder) GetSubs(rollNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubs", reflect.TypeOf((*MockenrollmentServiceSample)(nil).GetSubs), rollNo)
}

// Insert mocks base method.
func (m *MockenrollmentServiceSample) Insert(sub models.Enroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockenrollmentServiceSampleMockRecorder) Insert(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockenrollmentServiceSample)(nil).Insert), sub)
}

// MocksubjectServiceSample is a mock of subjectServiceSample interface.
type MocksubjectServiceSample struct {
	ctrl     *gomock.Controller
	recorder *MocksubjectServiceSampleMockRecorder
}

// MocksubjectServiceSampleMockRecorder is the mock recorder for MocksubjectServiceSample.
type MocksubjectServiceSampleMockRecorder struct {
	mock *MocksubjectServiceSample
}

// NewMocksubjectServiceSample creates a new mock instance.
func NewMocksubjectServiceSample(ctrl *gomock.Controller) *MocksubjectServiceSample {
	mock := &MocksubjectServiceSample{ctrl: ctrl}
	mock.recorder = &MocksubjectServiceSampleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksubjectServiceSample) EXPECT() *MocksubjectServiceSampleMockRecorder {
	return m.recorder
}

// GetValidation mocks base method.
func (m *MocksubjectServiceSample) GetValidation(id int) (models.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidation", id)
	ret0, _ := ret[0].(models.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidation indicates an expected call of GetValidation.
func (mr *MocksubjectServiceSampleMockRecorder) GetValidation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidation", reflect.TypeOf((*MocksubjectServiceSample)(nil).GetValidation), id)
}

// InsertValidation mocks base method.
func (m *MocksubjectServiceSample) InsertValidation(sub models.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertValidation", sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertValidation indicates an expected call of InsertValidation.
func (mr *MocksubjectServiceSampleMockRecorder) InsertValidation(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertValidation", reflect.TypeOf((*MocksubjectServiceSample)(nil).InsertValidation), sub)
}
