// Code generated by MockGen. DO NOT EDIT.
// Source: student.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/student-api/models"
)

// MockstudentEnrollmentService is a mock of studentEnrollmentService interface.
type MockstudentEnrollmentService struct {
	ctrl     *gomock.Controller
	recorder *MockstudentEnrollmentServiceMockRecorder
}

// MockstudentEnrollmentServiceMockRecorder is the mock recorder for MockstudentEnrollmentService.
type MockstudentEnrollmentServiceMockRecorder struct {
	mock *MockstudentEnrollmentService
}

// NewMockstudentEnrollmentService creates a new mock instance.
func NewMockstudentEnrollmentService(ctrl *gomock.Controller) *MockstudentEnrollmentService {
	mock := &MockstudentEnrollmentService{ctrl: ctrl}
	mock.recorder = &MockstudentEnrollmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstudentEnrollmentService) EXPECT() *MockstudentEnrollmentServiceMockRecorder {
	return m.recorder
}

// Enroll mocks base method.
func (m *MockstudentEnrollmentService) Enroll(id, rollNo int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enroll", id, rollNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enroll indicates an expected call of Enroll.
func (mr *MockstudentEnrollmentServiceMockRecorder) Enroll(id, rollNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enroll", reflect.TypeOf((*MockstudentEnrollmentService)(nil).Enroll), id, rollNo)
}

// GetValidation mocks base method.
func (m *MockstudentEnrollmentService) GetValidation(rollNo string) (models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidation", rollNo)
	ret0, _ := ret[0].(models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidation indicates an expected call of GetValidation.
func (mr *MockstudentEnrollmentServiceMockRecorder) GetValidation(rollNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidation", reflect.TypeOf((*MockstudentEnrollmentService)(nil).GetValidation), rollNo)
}

// PostValidation mocks base method.
func (m *MockstudentEnrollmentService) PostValidation(arg0 models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValidation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostValidation indicates an expected call of PostValidation.
func (mr *MockstudentEnrollmentServiceMockRecorder) PostValidation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValidation", reflect.TypeOf((*MockstudentEnrollmentService)(nil).PostValidation), arg0)
}
