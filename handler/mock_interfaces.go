// Code generated by MockGen. DO NOT EDIT.
// Source: student.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/student-api/models"
)

// Mockdatastore is a mock of datastore interface.
type Mockdatastore struct {
	ctrl     *gomock.Controller
	recorder *MockdatastoreMockRecorder
}

// MockdatastoreMockRecorder is the mock recorder for Mockdatastore.
type MockdatastoreMockRecorder struct {
	mock *Mockdatastore
}

// NewMockdatastore creates a new mock instance.
func NewMockdatastore(ctrl *gomock.Controller) *Mockdatastore {
	mock := &Mockdatastore{ctrl: ctrl}
	mock.recorder = &MockdatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdatastore) EXPECT() *MockdatastoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *Mockdatastore) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockdatastoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockdatastore)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *Mockdatastore) Get(arg0 string) (models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockdatastoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockdatastore)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *Mockdatastore) GetAll() ([]models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockdatastoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*Mockdatastore)(nil).GetAll))
}

// Insert mocks base method.
func (m *Mockdatastore) Insert(arg0 models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockdatastoreMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*Mockdatastore)(nil).Insert), arg0)
}

// Update mocks base method.
func (m *Mockdatastore) Update(arg0 models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockdatastoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Mockdatastore)(nil).Update), arg0)
}
